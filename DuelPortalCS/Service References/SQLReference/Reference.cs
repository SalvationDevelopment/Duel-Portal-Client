//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 4.0.60310.0
// 
namespace DuelPortalCS.SQLReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardDetails", Namespace="http://schemas.datacontract.org/2004/07/DuelPortalCS.Web")]
    public partial class CardDetails : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ATKField;
        
        private string AttributeField;
        
        private sbyte CountersField;
        
        private string CreatorField;
        
        private int DEFField;
        
        private bool FacedownField;
        
        private string FlavorField;
        
        private int IDField;
        
        private bool IsItHorizontalField;
        
        private int LevelField;
        
        private int LimitField;
        
        private string LoreField;
        
        private string NameField;
        
        private bool OpponentOwnedField;
        
        private string SpecialSetField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ATK {
            get {
                return this.ATKField;
            }
            set {
                if ((this.ATKField.Equals(value) != true)) {
                    this.ATKField = value;
                    this.RaisePropertyChanged("ATK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Attribute {
            get {
                return this.AttributeField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeField, value) != true)) {
                    this.AttributeField = value;
                    this.RaisePropertyChanged("Attribute");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public sbyte Counters {
            get {
                return this.CountersField;
            }
            set {
                if ((this.CountersField.Equals(value) != true)) {
                    this.CountersField = value;
                    this.RaisePropertyChanged("Counters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Creator {
            get {
                return this.CreatorField;
            }
            set {
                if ((object.ReferenceEquals(this.CreatorField, value) != true)) {
                    this.CreatorField = value;
                    this.RaisePropertyChanged("Creator");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int DEF {
            get {
                return this.DEFField;
            }
            set {
                if ((this.DEFField.Equals(value) != true)) {
                    this.DEFField = value;
                    this.RaisePropertyChanged("DEF");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Facedown {
            get {
                return this.FacedownField;
            }
            set {
                if ((this.FacedownField.Equals(value) != true)) {
                    this.FacedownField = value;
                    this.RaisePropertyChanged("Facedown");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Flavor {
            get {
                return this.FlavorField;
            }
            set {
                if ((object.ReferenceEquals(this.FlavorField, value) != true)) {
                    this.FlavorField = value;
                    this.RaisePropertyChanged("Flavor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsItHorizontal {
            get {
                return this.IsItHorizontalField;
            }
            set {
                if ((this.IsItHorizontalField.Equals(value) != true)) {
                    this.IsItHorizontalField = value;
                    this.RaisePropertyChanged("IsItHorizontal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Level {
            get {
                return this.LevelField;
            }
            set {
                if ((this.LevelField.Equals(value) != true)) {
                    this.LevelField = value;
                    this.RaisePropertyChanged("Level");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Limit {
            get {
                return this.LimitField;
            }
            set {
                if ((this.LimitField.Equals(value) != true)) {
                    this.LimitField = value;
                    this.RaisePropertyChanged("Limit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Lore {
            get {
                return this.LoreField;
            }
            set {
                if ((object.ReferenceEquals(this.LoreField, value) != true)) {
                    this.LoreField = value;
                    this.RaisePropertyChanged("Lore");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool OpponentOwned {
            get {
                return this.OpponentOwnedField;
            }
            set {
                if ((this.OpponentOwnedField.Equals(value) != true)) {
                    this.OpponentOwnedField = value;
                    this.RaisePropertyChanged("OpponentOwned");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SpecialSet {
            get {
                return this.SpecialSetField;
            }
            set {
                if ((object.ReferenceEquals(this.SpecialSetField, value) != true)) {
                    this.SpecialSetField = value;
                    this.RaisePropertyChanged("SpecialSet");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardChangeData", Namespace="http://schemas.datacontract.org/2004/07/DuelPortalCS.Web")]
    public partial class CardChangeData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<bool> cardHasImageNowField;
        
        private System.Nullable<bool> cardSuccessField;
        
        private System.Nullable<bool> imageSuccessField;
        
        private string messageField;
        
        private int newCardTrueIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> cardHasImageNow {
            get {
                return this.cardHasImageNowField;
            }
            set {
                if ((this.cardHasImageNowField.Equals(value) != true)) {
                    this.cardHasImageNowField = value;
                    this.RaisePropertyChanged("cardHasImageNow");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> cardSuccess {
            get {
                return this.cardSuccessField;
            }
            set {
                if ((this.cardSuccessField.Equals(value) != true)) {
                    this.cardSuccessField = value;
                    this.RaisePropertyChanged("cardSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> imageSuccess {
            get {
                return this.imageSuccessField;
            }
            set {
                if ((this.imageSuccessField.Equals(value) != true)) {
                    this.imageSuccessField = value;
                    this.RaisePropertyChanged("imageSuccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string message {
            get {
                return this.messageField;
            }
            set {
                if ((object.ReferenceEquals(this.messageField, value) != true)) {
                    this.messageField = value;
                    this.RaisePropertyChanged("message");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int newCardTrueID {
            get {
                return this.newCardTrueIDField;
            }
            set {
                if ((this.newCardTrueIDField.Equals(value) != true)) {
                    this.newCardTrueIDField = value;
                    this.RaisePropertyChanged("newCardTrueID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginRegisterData", Namespace="http://schemas.datacontract.org/2004/07/DuelPortalCS.Web")]
    public partial class LoginRegisterData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string FailMessageField;
        
        private int IdField;
        
        private string PasswordField;
        
        private string PoolField;
        
        private string UsernameField;
        
        private bool VerifiedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FailMessage {
            get {
                return this.FailMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FailMessageField, value) != true)) {
                    this.FailMessageField = value;
                    this.RaisePropertyChanged("FailMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Pool {
            get {
                return this.PoolField;
            }
            set {
                if ((object.ReferenceEquals(this.PoolField, value) != true)) {
                    this.PoolField = value;
                    this.RaisePropertyChanged("Pool");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Verified {
            get {
                return this.VerifiedField;
            }
            set {
                if ((this.VerifiedField.Equals(value) != true)) {
                    this.VerifiedField = value;
                    this.RaisePropertyChanged("Verified");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserData", Namespace="http://schemas.datacontract.org/2004/07/DuelPortalCS.Web")]
    public partial class UserData : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool Allow_MessagingField;
        
        private string EmailField;
        
        private string PasswordField;
        
        private double RatingField;
        
        private int Rating_NumberField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Allow_Messaging {
            get {
                return this.Allow_MessagingField;
            }
            set {
                if ((this.Allow_MessagingField.Equals(value) != true)) {
                    this.Allow_MessagingField = value;
                    this.RaisePropertyChanged("Allow_Messaging");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rating {
            get {
                return this.RatingField;
            }
            set {
                if ((this.RatingField.Equals(value) != true)) {
                    this.RatingField = value;
                    this.RaisePropertyChanged("Rating");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Rating_Number {
            get {
                return this.Rating_NumberField;
            }
            set {
                if ((this.Rating_NumberField.Equals(value) != true)) {
                    this.Rating_NumberField = value;
                    this.RaisePropertyChanged("Rating_Number");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="Service1Console", ConfigurationName="SQLReference.IService1Console")]
    public interface IService1Console {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/populateSQL", ReplyAction="Service1Console/IService1Console/populateSQLResponse")]
        System.IAsyncResult BeginpopulateSQL(string username, bool isPublic, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> EndpopulateSQL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/submitCard", ReplyAction="Service1Console/IService1Console/submitCardResponse")]
        System.IAsyncResult BeginsubmitCard(DuelPortalCS.SQLReference.CardDetails stats, string imageUrlIfExists, bool readOnly, bool isPublic, System.AsyncCallback callback, object asyncState);
        
        DuelPortalCS.SQLReference.CardChangeData EndsubmitCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/editCard", ReplyAction="Service1Console/IService1Console/editCardResponse")]
        System.IAsyncResult BegineditCard(int trueID, DuelPortalCS.SQLReference.CardDetails stats, string user, string newImageIfExists, string pool, System.AsyncCallback callback, object asyncState);
        
        DuelPortalCS.SQLReference.CardChangeData EndeditCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/AddOrChangeCardCCG", ReplyAction="Service1Console/IService1Console/AddOrChangeCardCCGResponse")]
        System.IAsyncResult BeginAddOrChangeCardCCG(string ccgName, int cardId, DuelPortalCS.SQLReference.CardDetails data, string newImageIfExists, System.AsyncCallback callback, object asyncState);
        
        DuelPortalCS.SQLReference.CardChangeData EndAddOrChangeCardCCG(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/deleteCard", ReplyAction="Service1Console/IService1Console/deleteCardResponse")]
        System.IAsyncResult BegindeleteCard(DuelPortalCS.SQLReference.CardDetails stats, string user, System.AsyncCallback callback, object asyncState);
        
        bool EnddeleteCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/shareCard", ReplyAction="Service1Console/IService1Console/shareCardResponse")]
        System.IAsyncResult BeginshareCard(string username, string targetUser, System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> cardData, System.AsyncCallback callback, object asyncState);
        
        string EndshareCard(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/userLogin", ReplyAction="Service1Console/IService1Console/userLoginResponse")]
        System.IAsyncResult BeginuserLogin(string username, string password, System.AsyncCallback callback, object asyncState);
        
        DuelPortalCS.SQLReference.LoginRegisterData EnduserLogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/createOrVerifyNewUser", ReplyAction="Service1Console/IService1Console/createOrVerifyNewUserResponse")]
        System.IAsyncResult BegincreateOrVerifyNewUser(string username, string password, string verification, string email, bool allowMessaging, bool isVerifying, string cardPool, System.AsyncCallback callback, object asyncState);
        
        DuelPortalCS.SQLReference.LoginRegisterData EndcreateOrVerifyNewUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/ResendVerification", ReplyAction="Service1Console/IService1Console/ResendVerificationResponse")]
        System.IAsyncResult BeginResendVerification(string username, System.AsyncCallback callback, object asyncState);
        
        string EndResendVerification(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/getAllUsers", ReplyAction="Service1Console/IService1Console/getAllUsersResponse")]
        System.IAsyncResult BegingetAllUsers(System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndgetAllUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/rate", ReplyAction="Service1Console/IService1Console/rateResponse")]
        System.IAsyncResult Beginrate(string raterUsername, string targetUsername, int rating, System.AsyncCallback callback, object asyncState);
        
        bool Endrate(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/GetUserData", ReplyAction="Service1Console/IService1Console/GetUserDataResponse")]
        System.IAsyncResult BeginGetUserData(string username, System.AsyncCallback callback, object asyncState);
        
        DuelPortalCS.SQLReference.UserData EndGetUserData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/SetUserData", ReplyAction="Service1Console/IService1Console/SetUserDataResponse")]
        System.IAsyncResult BeginSetUserData(string username, DuelPortalCS.SQLReference.UserData uData, System.AsyncCallback callback, object asyncState);
        
        void EndSetUserData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/SetPool", ReplyAction="Service1Console/IService1Console/SetPoolResponse")]
        System.IAsyncResult BeginSetPool(string username, string pool, System.AsyncCallback callback, object asyncState);
        
        void EndSetPool(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/getRating", ReplyAction="Service1Console/IService1Console/getRatingResponse")]
        System.IAsyncResult BegingetRating(string username, System.AsyncCallback callback, object asyncState);
        
        double EndgetRating(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/submitDeck", ReplyAction="Service1Console/IService1Console/submitDeckResponse")]
        System.IAsyncResult BeginsubmitDeck(string username, string deckname, System.AsyncCallback callback, object asyncState);
        
        void EndsubmitDeck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/loadDeck", ReplyAction="Service1Console/IService1Console/loadDeckResponse")]
        System.IAsyncResult BeginloadDeck(string username, string deckname, System.AsyncCallback callback, object asyncState);
        
        string EndloadDeck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/SaveDeck", ReplyAction="Service1Console/IService1Console/SaveDeckResponse")]
        System.IAsyncResult BeginSaveDeck(string username, string deckname, string data, System.AsyncCallback callback, object asyncState);
        
        string EndSaveDeck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/NewDeck", ReplyAction="Service1Console/IService1Console/NewDeckResponse")]
        System.IAsyncResult BeginNewDeck(string username, string deckname, string data, System.AsyncCallback callback, object asyncState);
        
        void EndNewDeck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/getListOfMyDecks", ReplyAction="Service1Console/IService1Console/getListOfMyDecksResponse")]
        System.IAsyncResult BegingetListOfMyDecks(string Username, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndgetListOfMyDecks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/deleteDeck", ReplyAction="Service1Console/IService1Console/deleteDeckResponse")]
        System.IAsyncResult BegindeleteDeck(string username, string deckname, System.AsyncCallback callback, object asyncState);
        
        void EnddeleteDeck(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/deleteAllCards", ReplyAction="Service1Console/IService1Console/deleteAllCardsResponse")]
        System.IAsyncResult BegindeleteAllCards(string user, System.AsyncCallback callback, object asyncState);
        
        void EnddeleteAllCards(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/deleteAllDecks", ReplyAction="Service1Console/IService1Console/deleteAllDecksResponse")]
        System.IAsyncResult BegindeleteAllDecks(string username, System.AsyncCallback callback, object asyncState);
        
        void EnddeleteAllDecks(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/getFullImageURL", ReplyAction="Service1Console/IService1Console/getFullImageURLResponse")]
        System.IAsyncResult BegingetFullImageURL(string wikiPageUrl, System.AsyncCallback callback, object asyncState);
        
        string EndgetFullImageURL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/getListOfImages", ReplyAction="Service1Console/IService1Console/getListOfImagesResponse")]
        System.IAsyncResult BegingetListOfImages(System.AsyncCallback callback, object asyncState);
        
        string EndgetListOfImages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/getAvatarImage", ReplyAction="Service1Console/IService1Console/getAvatarImageResponse")]
        System.IAsyncResult BegingetAvatarImage(int userId, System.AsyncCallback callback, object asyncState);
        
        string EndgetAvatarImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/saveImage", ReplyAction="Service1Console/IService1Console/saveImageResponse")]
        System.IAsyncResult BeginsaveImage(string imgnameWithoutExtension, bool isAvi, string url, System.AsyncCallback callback, object asyncState);
        
        string EndsaveImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/saveTempImage", ReplyAction="Service1Console/IService1Console/saveTempImageResponse")]
        System.IAsyncResult BeginsaveTempImage(string url, System.AsyncCallback callback, object asyncState);
        
        string EndsaveTempImage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/InetConnection", ReplyAction="Service1Console/IService1Console/InetConnectionResponse")]
        System.IAsyncResult BeginInetConnection(string url, System.AsyncCallback callback, object asyncState);
        
        byte[] EndInetConnection(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/SendEmail", ReplyAction="Service1Console/IService1Console/SendEmailResponse")]
        System.IAsyncResult BeginSendEmail(string username, string toAddress, string subject, string body, bool extractEmail, System.AsyncCallback callback, object asyncState);
        
        string EndSendEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="Service1Console/IService1Console/WriteErrorReport", ReplyAction="Service1Console/IService1Console/WriteErrorReportResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DuelPortalCS.SQLReference.CardDetails))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DuelPortalCS.SQLReference.CardChangeData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DuelPortalCS.SQLReference.LoginRegisterData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(DuelPortalCS.SQLReference.UserData))]
        System.IAsyncResult BeginWriteErrorReport(string errorClass, string message, object result, string username, System.AsyncCallback callback, object asyncState);
        
        void EndWriteErrorReport(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1ConsoleChannel : DuelPortalCS.SQLReference.IService1Console, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class populateSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public populateSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class submitCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public submitCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuelPortalCS.SQLReference.CardChangeData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuelPortalCS.SQLReference.CardChangeData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class editCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public editCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuelPortalCS.SQLReference.CardChangeData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuelPortalCS.SQLReference.CardChangeData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddOrChangeCardCCGCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddOrChangeCardCCGCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuelPortalCS.SQLReference.CardChangeData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuelPortalCS.SQLReference.CardChangeData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class shareCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public shareCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class userLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public userLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuelPortalCS.SQLReference.LoginRegisterData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuelPortalCS.SQLReference.LoginRegisterData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class createOrVerifyNewUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public createOrVerifyNewUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuelPortalCS.SQLReference.LoginRegisterData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuelPortalCS.SQLReference.LoginRegisterData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResendVerificationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResendVerificationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAllUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAllUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class rateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public rateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public DuelPortalCS.SQLReference.UserData Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((DuelPortalCS.SQLReference.UserData)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class loadDeckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public loadDeckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveDeckCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveDeckCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfMyDecksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfMyDecksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getFullImageURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getFullImageURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfImagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfImagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAvatarImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAvatarImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveTempImageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveTempImageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InetConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InetConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public byte[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1ConsoleClient : System.ServiceModel.ClientBase<DuelPortalCS.SQLReference.IService1Console>, DuelPortalCS.SQLReference.IService1Console {
        
        private BeginOperationDelegate onBeginpopulateSQLDelegate;
        
        private EndOperationDelegate onEndpopulateSQLDelegate;
        
        private System.Threading.SendOrPostCallback onpopulateSQLCompletedDelegate;
        
        private BeginOperationDelegate onBeginsubmitCardDelegate;
        
        private EndOperationDelegate onEndsubmitCardDelegate;
        
        private System.Threading.SendOrPostCallback onsubmitCardCompletedDelegate;
        
        private BeginOperationDelegate onBegineditCardDelegate;
        
        private EndOperationDelegate onEndeditCardDelegate;
        
        private System.Threading.SendOrPostCallback oneditCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddOrChangeCardCCGDelegate;
        
        private EndOperationDelegate onEndAddOrChangeCardCCGDelegate;
        
        private System.Threading.SendOrPostCallback onAddOrChangeCardCCGCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteCardDelegate;
        
        private EndOperationDelegate onEnddeleteCardDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginshareCardDelegate;
        
        private EndOperationDelegate onEndshareCardDelegate;
        
        private System.Threading.SendOrPostCallback onshareCardCompletedDelegate;
        
        private BeginOperationDelegate onBeginuserLoginDelegate;
        
        private EndOperationDelegate onEnduserLoginDelegate;
        
        private System.Threading.SendOrPostCallback onuserLoginCompletedDelegate;
        
        private BeginOperationDelegate onBegincreateOrVerifyNewUserDelegate;
        
        private EndOperationDelegate onEndcreateOrVerifyNewUserDelegate;
        
        private System.Threading.SendOrPostCallback oncreateOrVerifyNewUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginResendVerificationDelegate;
        
        private EndOperationDelegate onEndResendVerificationDelegate;
        
        private System.Threading.SendOrPostCallback onResendVerificationCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAllUsersDelegate;
        
        private EndOperationDelegate onEndgetAllUsersDelegate;
        
        private System.Threading.SendOrPostCallback ongetAllUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginrateDelegate;
        
        private EndOperationDelegate onEndrateDelegate;
        
        private System.Threading.SendOrPostCallback onrateCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDataDelegate;
        
        private EndOperationDelegate onEndGetUserDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetUserDataDelegate;
        
        private EndOperationDelegate onEndSetUserDataDelegate;
        
        private System.Threading.SendOrPostCallback onSetUserDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetPoolDelegate;
        
        private EndOperationDelegate onEndSetPoolDelegate;
        
        private System.Threading.SendOrPostCallback onSetPoolCompletedDelegate;
        
        private BeginOperationDelegate onBegingetRatingDelegate;
        
        private EndOperationDelegate onEndgetRatingDelegate;
        
        private System.Threading.SendOrPostCallback ongetRatingCompletedDelegate;
        
        private BeginOperationDelegate onBeginsubmitDeckDelegate;
        
        private EndOperationDelegate onEndsubmitDeckDelegate;
        
        private System.Threading.SendOrPostCallback onsubmitDeckCompletedDelegate;
        
        private BeginOperationDelegate onBeginloadDeckDelegate;
        
        private EndOperationDelegate onEndloadDeckDelegate;
        
        private System.Threading.SendOrPostCallback onloadDeckCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveDeckDelegate;
        
        private EndOperationDelegate onEndSaveDeckDelegate;
        
        private System.Threading.SendOrPostCallback onSaveDeckCompletedDelegate;
        
        private BeginOperationDelegate onBeginNewDeckDelegate;
        
        private EndOperationDelegate onEndNewDeckDelegate;
        
        private System.Threading.SendOrPostCallback onNewDeckCompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfMyDecksDelegate;
        
        private EndOperationDelegate onEndgetListOfMyDecksDelegate;
        
        private System.Threading.SendOrPostCallback ongetListOfMyDecksCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteDeckDelegate;
        
        private EndOperationDelegate onEnddeleteDeckDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteDeckCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteAllCardsDelegate;
        
        private EndOperationDelegate onEnddeleteAllCardsDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteAllCardsCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteAllDecksDelegate;
        
        private EndOperationDelegate onEnddeleteAllDecksDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteAllDecksCompletedDelegate;
        
        private BeginOperationDelegate onBegingetFullImageURLDelegate;
        
        private EndOperationDelegate onEndgetFullImageURLDelegate;
        
        private System.Threading.SendOrPostCallback ongetFullImageURLCompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfImagesDelegate;
        
        private EndOperationDelegate onEndgetListOfImagesDelegate;
        
        private System.Threading.SendOrPostCallback ongetListOfImagesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAvatarImageDelegate;
        
        private EndOperationDelegate onEndgetAvatarImageDelegate;
        
        private System.Threading.SendOrPostCallback ongetAvatarImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveImageDelegate;
        
        private EndOperationDelegate onEndsaveImageDelegate;
        
        private System.Threading.SendOrPostCallback onsaveImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveTempImageDelegate;
        
        private EndOperationDelegate onEndsaveTempImageDelegate;
        
        private System.Threading.SendOrPostCallback onsaveTempImageCompletedDelegate;
        
        private BeginOperationDelegate onBeginInetConnectionDelegate;
        
        private EndOperationDelegate onEndInetConnectionDelegate;
        
        private System.Threading.SendOrPostCallback onInetConnectionCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendEmailDelegate;
        
        private EndOperationDelegate onEndSendEmailDelegate;
        
        private System.Threading.SendOrPostCallback onSendEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginWriteErrorReportDelegate;
        
        private EndOperationDelegate onEndWriteErrorReportDelegate;
        
        private System.Threading.SendOrPostCallback onWriteErrorReportCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1ConsoleClient() {
        }
        
        public Service1ConsoleClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1ConsoleClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1ConsoleClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1ConsoleClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<populateSQLCompletedEventArgs> populateSQLCompleted;
        
        public event System.EventHandler<submitCardCompletedEventArgs> submitCardCompleted;
        
        public event System.EventHandler<editCardCompletedEventArgs> editCardCompleted;
        
        public event System.EventHandler<AddOrChangeCardCCGCompletedEventArgs> AddOrChangeCardCCGCompleted;
        
        public event System.EventHandler<deleteCardCompletedEventArgs> deleteCardCompleted;
        
        public event System.EventHandler<shareCardCompletedEventArgs> shareCardCompleted;
        
        public event System.EventHandler<userLoginCompletedEventArgs> userLoginCompleted;
        
        public event System.EventHandler<createOrVerifyNewUserCompletedEventArgs> createOrVerifyNewUserCompleted;
        
        public event System.EventHandler<ResendVerificationCompletedEventArgs> ResendVerificationCompleted;
        
        public event System.EventHandler<getAllUsersCompletedEventArgs> getAllUsersCompleted;
        
        public event System.EventHandler<rateCompletedEventArgs> rateCompleted;
        
        public event System.EventHandler<GetUserDataCompletedEventArgs> GetUserDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetUserDataCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetPoolCompleted;
        
        public event System.EventHandler<getRatingCompletedEventArgs> getRatingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> submitDeckCompleted;
        
        public event System.EventHandler<loadDeckCompletedEventArgs> loadDeckCompleted;
        
        public event System.EventHandler<SaveDeckCompletedEventArgs> SaveDeckCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> NewDeckCompleted;
        
        public event System.EventHandler<getListOfMyDecksCompletedEventArgs> getListOfMyDecksCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteDeckCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteAllCardsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> deleteAllDecksCompleted;
        
        public event System.EventHandler<getFullImageURLCompletedEventArgs> getFullImageURLCompleted;
        
        public event System.EventHandler<getListOfImagesCompletedEventArgs> getListOfImagesCompleted;
        
        public event System.EventHandler<getAvatarImageCompletedEventArgs> getAvatarImageCompleted;
        
        public event System.EventHandler<saveImageCompletedEventArgs> saveImageCompleted;
        
        public event System.EventHandler<saveTempImageCompletedEventArgs> saveTempImageCompleted;
        
        public event System.EventHandler<InetConnectionCompletedEventArgs> InetConnectionCompleted;
        
        public event System.EventHandler<SendEmailCompletedEventArgs> SendEmailCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> WriteErrorReportCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginpopulateSQL(string username, bool isPublic, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginpopulateSQL(username, isPublic, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> DuelPortalCS.SQLReference.IService1Console.EndpopulateSQL(System.IAsyncResult result) {
            return base.Channel.EndpopulateSQL(result);
        }
        
        private System.IAsyncResult OnBeginpopulateSQL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            bool isPublic = ((bool)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginpopulateSQL(username, isPublic, callback, asyncState);
        }
        
        private object[] OnEndpopulateSQL(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndpopulateSQL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnpopulateSQLCompleted(object state) {
            if ((this.populateSQLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.populateSQLCompleted(this, new populateSQLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void populateSQLAsync(string username, bool isPublic) {
            this.populateSQLAsync(username, isPublic, null);
        }
        
        public void populateSQLAsync(string username, bool isPublic, object userState) {
            if ((this.onBeginpopulateSQLDelegate == null)) {
                this.onBeginpopulateSQLDelegate = new BeginOperationDelegate(this.OnBeginpopulateSQL);
            }
            if ((this.onEndpopulateSQLDelegate == null)) {
                this.onEndpopulateSQLDelegate = new EndOperationDelegate(this.OnEndpopulateSQL);
            }
            if ((this.onpopulateSQLCompletedDelegate == null)) {
                this.onpopulateSQLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnpopulateSQLCompleted);
            }
            base.InvokeAsync(this.onBeginpopulateSQLDelegate, new object[] {
                        username,
                        isPublic}, this.onEndpopulateSQLDelegate, this.onpopulateSQLCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginsubmitCard(DuelPortalCS.SQLReference.CardDetails stats, string imageUrlIfExists, bool readOnly, bool isPublic, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsubmitCard(stats, imageUrlIfExists, readOnly, isPublic, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DuelPortalCS.SQLReference.CardChangeData DuelPortalCS.SQLReference.IService1Console.EndsubmitCard(System.IAsyncResult result) {
            return base.Channel.EndsubmitCard(result);
        }
        
        private System.IAsyncResult OnBeginsubmitCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuelPortalCS.SQLReference.CardDetails stats = ((DuelPortalCS.SQLReference.CardDetails)(inValues[0]));
            string imageUrlIfExists = ((string)(inValues[1]));
            bool readOnly = ((bool)(inValues[2]));
            bool isPublic = ((bool)(inValues[3]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginsubmitCard(stats, imageUrlIfExists, readOnly, isPublic, callback, asyncState);
        }
        
        private object[] OnEndsubmitCard(System.IAsyncResult result) {
            DuelPortalCS.SQLReference.CardChangeData retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndsubmitCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsubmitCardCompleted(object state) {
            if ((this.submitCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.submitCardCompleted(this, new submitCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void submitCardAsync(DuelPortalCS.SQLReference.CardDetails stats, string imageUrlIfExists, bool readOnly, bool isPublic) {
            this.submitCardAsync(stats, imageUrlIfExists, readOnly, isPublic, null);
        }
        
        public void submitCardAsync(DuelPortalCS.SQLReference.CardDetails stats, string imageUrlIfExists, bool readOnly, bool isPublic, object userState) {
            if ((this.onBeginsubmitCardDelegate == null)) {
                this.onBeginsubmitCardDelegate = new BeginOperationDelegate(this.OnBeginsubmitCard);
            }
            if ((this.onEndsubmitCardDelegate == null)) {
                this.onEndsubmitCardDelegate = new EndOperationDelegate(this.OnEndsubmitCard);
            }
            if ((this.onsubmitCardCompletedDelegate == null)) {
                this.onsubmitCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsubmitCardCompleted);
            }
            base.InvokeAsync(this.onBeginsubmitCardDelegate, new object[] {
                        stats,
                        imageUrlIfExists,
                        readOnly,
                        isPublic}, this.onEndsubmitCardDelegate, this.onsubmitCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegineditCard(int trueID, DuelPortalCS.SQLReference.CardDetails stats, string user, string newImageIfExists, string pool, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegineditCard(trueID, stats, user, newImageIfExists, pool, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DuelPortalCS.SQLReference.CardChangeData DuelPortalCS.SQLReference.IService1Console.EndeditCard(System.IAsyncResult result) {
            return base.Channel.EndeditCard(result);
        }
        
        private System.IAsyncResult OnBegineditCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int trueID = ((int)(inValues[0]));
            DuelPortalCS.SQLReference.CardDetails stats = ((DuelPortalCS.SQLReference.CardDetails)(inValues[1]));
            string user = ((string)(inValues[2]));
            string newImageIfExists = ((string)(inValues[3]));
            string pool = ((string)(inValues[4]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegineditCard(trueID, stats, user, newImageIfExists, pool, callback, asyncState);
        }
        
        private object[] OnEndeditCard(System.IAsyncResult result) {
            DuelPortalCS.SQLReference.CardChangeData retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndeditCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OneditCardCompleted(object state) {
            if ((this.editCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.editCardCompleted(this, new editCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void editCardAsync(int trueID, DuelPortalCS.SQLReference.CardDetails stats, string user, string newImageIfExists, string pool) {
            this.editCardAsync(trueID, stats, user, newImageIfExists, pool, null);
        }
        
        public void editCardAsync(int trueID, DuelPortalCS.SQLReference.CardDetails stats, string user, string newImageIfExists, string pool, object userState) {
            if ((this.onBegineditCardDelegate == null)) {
                this.onBegineditCardDelegate = new BeginOperationDelegate(this.OnBegineditCard);
            }
            if ((this.onEndeditCardDelegate == null)) {
                this.onEndeditCardDelegate = new EndOperationDelegate(this.OnEndeditCard);
            }
            if ((this.oneditCardCompletedDelegate == null)) {
                this.oneditCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OneditCardCompleted);
            }
            base.InvokeAsync(this.onBegineditCardDelegate, new object[] {
                        trueID,
                        stats,
                        user,
                        newImageIfExists,
                        pool}, this.onEndeditCardDelegate, this.oneditCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginAddOrChangeCardCCG(string ccgName, int cardId, DuelPortalCS.SQLReference.CardDetails data, string newImageIfExists, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddOrChangeCardCCG(ccgName, cardId, data, newImageIfExists, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DuelPortalCS.SQLReference.CardChangeData DuelPortalCS.SQLReference.IService1Console.EndAddOrChangeCardCCG(System.IAsyncResult result) {
            return base.Channel.EndAddOrChangeCardCCG(result);
        }
        
        private System.IAsyncResult OnBeginAddOrChangeCardCCG(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ccgName = ((string)(inValues[0]));
            int cardId = ((int)(inValues[1]));
            DuelPortalCS.SQLReference.CardDetails data = ((DuelPortalCS.SQLReference.CardDetails)(inValues[2]));
            string newImageIfExists = ((string)(inValues[3]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginAddOrChangeCardCCG(ccgName, cardId, data, newImageIfExists, callback, asyncState);
        }
        
        private object[] OnEndAddOrChangeCardCCG(System.IAsyncResult result) {
            DuelPortalCS.SQLReference.CardChangeData retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndAddOrChangeCardCCG(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddOrChangeCardCCGCompleted(object state) {
            if ((this.AddOrChangeCardCCGCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddOrChangeCardCCGCompleted(this, new AddOrChangeCardCCGCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddOrChangeCardCCGAsync(string ccgName, int cardId, DuelPortalCS.SQLReference.CardDetails data, string newImageIfExists) {
            this.AddOrChangeCardCCGAsync(ccgName, cardId, data, newImageIfExists, null);
        }
        
        public void AddOrChangeCardCCGAsync(string ccgName, int cardId, DuelPortalCS.SQLReference.CardDetails data, string newImageIfExists, object userState) {
            if ((this.onBeginAddOrChangeCardCCGDelegate == null)) {
                this.onBeginAddOrChangeCardCCGDelegate = new BeginOperationDelegate(this.OnBeginAddOrChangeCardCCG);
            }
            if ((this.onEndAddOrChangeCardCCGDelegate == null)) {
                this.onEndAddOrChangeCardCCGDelegate = new EndOperationDelegate(this.OnEndAddOrChangeCardCCG);
            }
            if ((this.onAddOrChangeCardCCGCompletedDelegate == null)) {
                this.onAddOrChangeCardCCGCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddOrChangeCardCCGCompleted);
            }
            base.InvokeAsync(this.onBeginAddOrChangeCardCCGDelegate, new object[] {
                        ccgName,
                        cardId,
                        data,
                        newImageIfExists}, this.onEndAddOrChangeCardCCGDelegate, this.onAddOrChangeCardCCGCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegindeleteCard(DuelPortalCS.SQLReference.CardDetails stats, string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteCard(stats, user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool DuelPortalCS.SQLReference.IService1Console.EnddeleteCard(System.IAsyncResult result) {
            return base.Channel.EnddeleteCard(result);
        }
        
        private System.IAsyncResult OnBegindeleteCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            DuelPortalCS.SQLReference.CardDetails stats = ((DuelPortalCS.SQLReference.CardDetails)(inValues[0]));
            string user = ((string)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegindeleteCard(stats, user, callback, asyncState);
        }
        
        private object[] OnEnddeleteCard(System.IAsyncResult result) {
            bool retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EnddeleteCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OndeleteCardCompleted(object state) {
            if ((this.deleteCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteCardCompleted(this, new deleteCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteCardAsync(DuelPortalCS.SQLReference.CardDetails stats, string user) {
            this.deleteCardAsync(stats, user, null);
        }
        
        public void deleteCardAsync(DuelPortalCS.SQLReference.CardDetails stats, string user, object userState) {
            if ((this.onBegindeleteCardDelegate == null)) {
                this.onBegindeleteCardDelegate = new BeginOperationDelegate(this.OnBegindeleteCard);
            }
            if ((this.onEnddeleteCardDelegate == null)) {
                this.onEnddeleteCardDelegate = new EndOperationDelegate(this.OnEnddeleteCard);
            }
            if ((this.ondeleteCardCompletedDelegate == null)) {
                this.ondeleteCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteCardCompleted);
            }
            base.InvokeAsync(this.onBegindeleteCardDelegate, new object[] {
                        stats,
                        user}, this.onEnddeleteCardDelegate, this.ondeleteCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginshareCard(string username, string targetUser, System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> cardData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginshareCard(username, targetUser, cardData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndshareCard(System.IAsyncResult result) {
            return base.Channel.EndshareCard(result);
        }
        
        private System.IAsyncResult OnBeginshareCard(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string targetUser = ((string)(inValues[1]));
            System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> cardData = ((System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails>)(inValues[2]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginshareCard(username, targetUser, cardData, callback, asyncState);
        }
        
        private object[] OnEndshareCard(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndshareCard(result);
            return new object[] {
                    retVal};
        }
        
        private void OnshareCardCompleted(object state) {
            if ((this.shareCardCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.shareCardCompleted(this, new shareCardCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void shareCardAsync(string username, string targetUser, System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> cardData) {
            this.shareCardAsync(username, targetUser, cardData, null);
        }
        
        public void shareCardAsync(string username, string targetUser, System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> cardData, object userState) {
            if ((this.onBeginshareCardDelegate == null)) {
                this.onBeginshareCardDelegate = new BeginOperationDelegate(this.OnBeginshareCard);
            }
            if ((this.onEndshareCardDelegate == null)) {
                this.onEndshareCardDelegate = new EndOperationDelegate(this.OnEndshareCard);
            }
            if ((this.onshareCardCompletedDelegate == null)) {
                this.onshareCardCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnshareCardCompleted);
            }
            base.InvokeAsync(this.onBeginshareCardDelegate, new object[] {
                        username,
                        targetUser,
                        cardData}, this.onEndshareCardDelegate, this.onshareCardCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginuserLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginuserLogin(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DuelPortalCS.SQLReference.LoginRegisterData DuelPortalCS.SQLReference.IService1Console.EnduserLogin(System.IAsyncResult result) {
            return base.Channel.EnduserLogin(result);
        }
        
        private System.IAsyncResult OnBeginuserLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginuserLogin(username, password, callback, asyncState);
        }
        
        private object[] OnEnduserLogin(System.IAsyncResult result) {
            DuelPortalCS.SQLReference.LoginRegisterData retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EnduserLogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnuserLoginCompleted(object state) {
            if ((this.userLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.userLoginCompleted(this, new userLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void userLoginAsync(string username, string password) {
            this.userLoginAsync(username, password, null);
        }
        
        public void userLoginAsync(string username, string password, object userState) {
            if ((this.onBeginuserLoginDelegate == null)) {
                this.onBeginuserLoginDelegate = new BeginOperationDelegate(this.OnBeginuserLogin);
            }
            if ((this.onEnduserLoginDelegate == null)) {
                this.onEnduserLoginDelegate = new EndOperationDelegate(this.OnEnduserLogin);
            }
            if ((this.onuserLoginCompletedDelegate == null)) {
                this.onuserLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnuserLoginCompleted);
            }
            base.InvokeAsync(this.onBeginuserLoginDelegate, new object[] {
                        username,
                        password}, this.onEnduserLoginDelegate, this.onuserLoginCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegincreateOrVerifyNewUser(string username, string password, string verification, string email, bool allowMessaging, bool isVerifying, string cardPool, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincreateOrVerifyNewUser(username, password, verification, email, allowMessaging, isVerifying, cardPool, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DuelPortalCS.SQLReference.LoginRegisterData DuelPortalCS.SQLReference.IService1Console.EndcreateOrVerifyNewUser(System.IAsyncResult result) {
            return base.Channel.EndcreateOrVerifyNewUser(result);
        }
        
        private System.IAsyncResult OnBegincreateOrVerifyNewUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string verification = ((string)(inValues[2]));
            string email = ((string)(inValues[3]));
            bool allowMessaging = ((bool)(inValues[4]));
            bool isVerifying = ((bool)(inValues[5]));
            string cardPool = ((string)(inValues[6]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegincreateOrVerifyNewUser(username, password, verification, email, allowMessaging, isVerifying, cardPool, callback, asyncState);
        }
        
        private object[] OnEndcreateOrVerifyNewUser(System.IAsyncResult result) {
            DuelPortalCS.SQLReference.LoginRegisterData retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndcreateOrVerifyNewUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OncreateOrVerifyNewUserCompleted(object state) {
            if ((this.createOrVerifyNewUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.createOrVerifyNewUserCompleted(this, new createOrVerifyNewUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void createOrVerifyNewUserAsync(string username, string password, string verification, string email, bool allowMessaging, bool isVerifying, string cardPool) {
            this.createOrVerifyNewUserAsync(username, password, verification, email, allowMessaging, isVerifying, cardPool, null);
        }
        
        public void createOrVerifyNewUserAsync(string username, string password, string verification, string email, bool allowMessaging, bool isVerifying, string cardPool, object userState) {
            if ((this.onBegincreateOrVerifyNewUserDelegate == null)) {
                this.onBegincreateOrVerifyNewUserDelegate = new BeginOperationDelegate(this.OnBegincreateOrVerifyNewUser);
            }
            if ((this.onEndcreateOrVerifyNewUserDelegate == null)) {
                this.onEndcreateOrVerifyNewUserDelegate = new EndOperationDelegate(this.OnEndcreateOrVerifyNewUser);
            }
            if ((this.oncreateOrVerifyNewUserCompletedDelegate == null)) {
                this.oncreateOrVerifyNewUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncreateOrVerifyNewUserCompleted);
            }
            base.InvokeAsync(this.onBegincreateOrVerifyNewUserDelegate, new object[] {
                        username,
                        password,
                        verification,
                        email,
                        allowMessaging,
                        isVerifying,
                        cardPool}, this.onEndcreateOrVerifyNewUserDelegate, this.oncreateOrVerifyNewUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginResendVerification(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResendVerification(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndResendVerification(System.IAsyncResult result) {
            return base.Channel.EndResendVerification(result);
        }
        
        private System.IAsyncResult OnBeginResendVerification(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginResendVerification(username, callback, asyncState);
        }
        
        private object[] OnEndResendVerification(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndResendVerification(result);
            return new object[] {
                    retVal};
        }
        
        private void OnResendVerificationCompleted(object state) {
            if ((this.ResendVerificationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResendVerificationCompleted(this, new ResendVerificationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResendVerificationAsync(string username) {
            this.ResendVerificationAsync(username, null);
        }
        
        public void ResendVerificationAsync(string username, object userState) {
            if ((this.onBeginResendVerificationDelegate == null)) {
                this.onBeginResendVerificationDelegate = new BeginOperationDelegate(this.OnBeginResendVerification);
            }
            if ((this.onEndResendVerificationDelegate == null)) {
                this.onEndResendVerificationDelegate = new EndOperationDelegate(this.OnEndResendVerification);
            }
            if ((this.onResendVerificationCompletedDelegate == null)) {
                this.onResendVerificationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResendVerificationCompleted);
            }
            base.InvokeAsync(this.onBeginResendVerificationDelegate, new object[] {
                        username}, this.onEndResendVerificationDelegate, this.onResendVerificationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegingetAllUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAllUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> DuelPortalCS.SQLReference.IService1Console.EndgetAllUsers(System.IAsyncResult result) {
            return base.Channel.EndgetAllUsers(result);
        }
        
        private System.IAsyncResult OnBegingetAllUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegingetAllUsers(callback, asyncState);
        }
        
        private object[] OnEndgetAllUsers(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndgetAllUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAllUsersCompleted(object state) {
            if ((this.getAllUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAllUsersCompleted(this, new getAllUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAllUsersAsync() {
            this.getAllUsersAsync(null);
        }
        
        public void getAllUsersAsync(object userState) {
            if ((this.onBegingetAllUsersDelegate == null)) {
                this.onBegingetAllUsersDelegate = new BeginOperationDelegate(this.OnBegingetAllUsers);
            }
            if ((this.onEndgetAllUsersDelegate == null)) {
                this.onEndgetAllUsersDelegate = new EndOperationDelegate(this.OnEndgetAllUsers);
            }
            if ((this.ongetAllUsersCompletedDelegate == null)) {
                this.ongetAllUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAllUsersCompleted);
            }
            base.InvokeAsync(this.onBegingetAllUsersDelegate, null, this.onEndgetAllUsersDelegate, this.ongetAllUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.Beginrate(string raterUsername, string targetUsername, int rating, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginrate(raterUsername, targetUsername, rating, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool DuelPortalCS.SQLReference.IService1Console.Endrate(System.IAsyncResult result) {
            return base.Channel.Endrate(result);
        }
        
        private System.IAsyncResult OnBeginrate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string raterUsername = ((string)(inValues[0]));
            string targetUsername = ((string)(inValues[1]));
            int rating = ((int)(inValues[2]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).Beginrate(raterUsername, targetUsername, rating, callback, asyncState);
        }
        
        private object[] OnEndrate(System.IAsyncResult result) {
            bool retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).Endrate(result);
            return new object[] {
                    retVal};
        }
        
        private void OnrateCompleted(object state) {
            if ((this.rateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.rateCompleted(this, new rateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void rateAsync(string raterUsername, string targetUsername, int rating) {
            this.rateAsync(raterUsername, targetUsername, rating, null);
        }
        
        public void rateAsync(string raterUsername, string targetUsername, int rating, object userState) {
            if ((this.onBeginrateDelegate == null)) {
                this.onBeginrateDelegate = new BeginOperationDelegate(this.OnBeginrate);
            }
            if ((this.onEndrateDelegate == null)) {
                this.onEndrateDelegate = new EndOperationDelegate(this.OnEndrate);
            }
            if ((this.onrateCompletedDelegate == null)) {
                this.onrateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnrateCompleted);
            }
            base.InvokeAsync(this.onBeginrateDelegate, new object[] {
                        raterUsername,
                        targetUsername,
                        rating}, this.onEndrateDelegate, this.onrateCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginGetUserData(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserData(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        DuelPortalCS.SQLReference.UserData DuelPortalCS.SQLReference.IService1Console.EndGetUserData(System.IAsyncResult result) {
            return base.Channel.EndGetUserData(result);
        }
        
        private System.IAsyncResult OnBeginGetUserData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginGetUserData(username, callback, asyncState);
        }
        
        private object[] OnEndGetUserData(System.IAsyncResult result) {
            DuelPortalCS.SQLReference.UserData retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndGetUserData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserDataCompleted(object state) {
            if ((this.GetUserDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserDataCompleted(this, new GetUserDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserDataAsync(string username) {
            this.GetUserDataAsync(username, null);
        }
        
        public void GetUserDataAsync(string username, object userState) {
            if ((this.onBeginGetUserDataDelegate == null)) {
                this.onBeginGetUserDataDelegate = new BeginOperationDelegate(this.OnBeginGetUserData);
            }
            if ((this.onEndGetUserDataDelegate == null)) {
                this.onEndGetUserDataDelegate = new EndOperationDelegate(this.OnEndGetUserData);
            }
            if ((this.onGetUserDataCompletedDelegate == null)) {
                this.onGetUserDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDataDelegate, new object[] {
                        username}, this.onEndGetUserDataDelegate, this.onGetUserDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginSetUserData(string username, DuelPortalCS.SQLReference.UserData uData, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetUserData(username, uData, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EndSetUserData(System.IAsyncResult result) {
            base.Channel.EndSetUserData(result);
        }
        
        private System.IAsyncResult OnBeginSetUserData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            DuelPortalCS.SQLReference.UserData uData = ((DuelPortalCS.SQLReference.UserData)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginSetUserData(username, uData, callback, asyncState);
        }
        
        private object[] OnEndSetUserData(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EndSetUserData(result);
            return null;
        }
        
        private void OnSetUserDataCompleted(object state) {
            if ((this.SetUserDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetUserDataCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetUserDataAsync(string username, DuelPortalCS.SQLReference.UserData uData) {
            this.SetUserDataAsync(username, uData, null);
        }
        
        public void SetUserDataAsync(string username, DuelPortalCS.SQLReference.UserData uData, object userState) {
            if ((this.onBeginSetUserDataDelegate == null)) {
                this.onBeginSetUserDataDelegate = new BeginOperationDelegate(this.OnBeginSetUserData);
            }
            if ((this.onEndSetUserDataDelegate == null)) {
                this.onEndSetUserDataDelegate = new EndOperationDelegate(this.OnEndSetUserData);
            }
            if ((this.onSetUserDataCompletedDelegate == null)) {
                this.onSetUserDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetUserDataCompleted);
            }
            base.InvokeAsync(this.onBeginSetUserDataDelegate, new object[] {
                        username,
                        uData}, this.onEndSetUserDataDelegate, this.onSetUserDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginSetPool(string username, string pool, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetPool(username, pool, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EndSetPool(System.IAsyncResult result) {
            base.Channel.EndSetPool(result);
        }
        
        private System.IAsyncResult OnBeginSetPool(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string pool = ((string)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginSetPool(username, pool, callback, asyncState);
        }
        
        private object[] OnEndSetPool(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EndSetPool(result);
            return null;
        }
        
        private void OnSetPoolCompleted(object state) {
            if ((this.SetPoolCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetPoolCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetPoolAsync(string username, string pool) {
            this.SetPoolAsync(username, pool, null);
        }
        
        public void SetPoolAsync(string username, string pool, object userState) {
            if ((this.onBeginSetPoolDelegate == null)) {
                this.onBeginSetPoolDelegate = new BeginOperationDelegate(this.OnBeginSetPool);
            }
            if ((this.onEndSetPoolDelegate == null)) {
                this.onEndSetPoolDelegate = new EndOperationDelegate(this.OnEndSetPool);
            }
            if ((this.onSetPoolCompletedDelegate == null)) {
                this.onSetPoolCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetPoolCompleted);
            }
            base.InvokeAsync(this.onBeginSetPoolDelegate, new object[] {
                        username,
                        pool}, this.onEndSetPoolDelegate, this.onSetPoolCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegingetRating(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetRating(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double DuelPortalCS.SQLReference.IService1Console.EndgetRating(System.IAsyncResult result) {
            return base.Channel.EndgetRating(result);
        }
        
        private System.IAsyncResult OnBegingetRating(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegingetRating(username, callback, asyncState);
        }
        
        private object[] OnEndgetRating(System.IAsyncResult result) {
            double retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndgetRating(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetRatingCompleted(object state) {
            if ((this.getRatingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getRatingCompleted(this, new getRatingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getRatingAsync(string username) {
            this.getRatingAsync(username, null);
        }
        
        public void getRatingAsync(string username, object userState) {
            if ((this.onBegingetRatingDelegate == null)) {
                this.onBegingetRatingDelegate = new BeginOperationDelegate(this.OnBegingetRating);
            }
            if ((this.onEndgetRatingDelegate == null)) {
                this.onEndgetRatingDelegate = new EndOperationDelegate(this.OnEndgetRating);
            }
            if ((this.ongetRatingCompletedDelegate == null)) {
                this.ongetRatingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetRatingCompleted);
            }
            base.InvokeAsync(this.onBegingetRatingDelegate, new object[] {
                        username}, this.onEndgetRatingDelegate, this.ongetRatingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginsubmitDeck(string username, string deckname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsubmitDeck(username, deckname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EndsubmitDeck(System.IAsyncResult result) {
            base.Channel.EndsubmitDeck(result);
        }
        
        private System.IAsyncResult OnBeginsubmitDeck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string deckname = ((string)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginsubmitDeck(username, deckname, callback, asyncState);
        }
        
        private object[] OnEndsubmitDeck(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EndsubmitDeck(result);
            return null;
        }
        
        private void OnsubmitDeckCompleted(object state) {
            if ((this.submitDeckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.submitDeckCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void submitDeckAsync(string username, string deckname) {
            this.submitDeckAsync(username, deckname, null);
        }
        
        public void submitDeckAsync(string username, string deckname, object userState) {
            if ((this.onBeginsubmitDeckDelegate == null)) {
                this.onBeginsubmitDeckDelegate = new BeginOperationDelegate(this.OnBeginsubmitDeck);
            }
            if ((this.onEndsubmitDeckDelegate == null)) {
                this.onEndsubmitDeckDelegate = new EndOperationDelegate(this.OnEndsubmitDeck);
            }
            if ((this.onsubmitDeckCompletedDelegate == null)) {
                this.onsubmitDeckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsubmitDeckCompleted);
            }
            base.InvokeAsync(this.onBeginsubmitDeckDelegate, new object[] {
                        username,
                        deckname}, this.onEndsubmitDeckDelegate, this.onsubmitDeckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginloadDeck(string username, string deckname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginloadDeck(username, deckname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndloadDeck(System.IAsyncResult result) {
            return base.Channel.EndloadDeck(result);
        }
        
        private System.IAsyncResult OnBeginloadDeck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string deckname = ((string)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginloadDeck(username, deckname, callback, asyncState);
        }
        
        private object[] OnEndloadDeck(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndloadDeck(result);
            return new object[] {
                    retVal};
        }
        
        private void OnloadDeckCompleted(object state) {
            if ((this.loadDeckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.loadDeckCompleted(this, new loadDeckCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void loadDeckAsync(string username, string deckname) {
            this.loadDeckAsync(username, deckname, null);
        }
        
        public void loadDeckAsync(string username, string deckname, object userState) {
            if ((this.onBeginloadDeckDelegate == null)) {
                this.onBeginloadDeckDelegate = new BeginOperationDelegate(this.OnBeginloadDeck);
            }
            if ((this.onEndloadDeckDelegate == null)) {
                this.onEndloadDeckDelegate = new EndOperationDelegate(this.OnEndloadDeck);
            }
            if ((this.onloadDeckCompletedDelegate == null)) {
                this.onloadDeckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnloadDeckCompleted);
            }
            base.InvokeAsync(this.onBeginloadDeckDelegate, new object[] {
                        username,
                        deckname}, this.onEndloadDeckDelegate, this.onloadDeckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginSaveDeck(string username, string deckname, string data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveDeck(username, deckname, data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndSaveDeck(System.IAsyncResult result) {
            return base.Channel.EndSaveDeck(result);
        }
        
        private System.IAsyncResult OnBeginSaveDeck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string deckname = ((string)(inValues[1]));
            string data = ((string)(inValues[2]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginSaveDeck(username, deckname, data, callback, asyncState);
        }
        
        private object[] OnEndSaveDeck(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndSaveDeck(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveDeckCompleted(object state) {
            if ((this.SaveDeckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveDeckCompleted(this, new SaveDeckCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveDeckAsync(string username, string deckname, string data) {
            this.SaveDeckAsync(username, deckname, data, null);
        }
        
        public void SaveDeckAsync(string username, string deckname, string data, object userState) {
            if ((this.onBeginSaveDeckDelegate == null)) {
                this.onBeginSaveDeckDelegate = new BeginOperationDelegate(this.OnBeginSaveDeck);
            }
            if ((this.onEndSaveDeckDelegate == null)) {
                this.onEndSaveDeckDelegate = new EndOperationDelegate(this.OnEndSaveDeck);
            }
            if ((this.onSaveDeckCompletedDelegate == null)) {
                this.onSaveDeckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveDeckCompleted);
            }
            base.InvokeAsync(this.onBeginSaveDeckDelegate, new object[] {
                        username,
                        deckname,
                        data}, this.onEndSaveDeckDelegate, this.onSaveDeckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginNewDeck(string username, string deckname, string data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginNewDeck(username, deckname, data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EndNewDeck(System.IAsyncResult result) {
            base.Channel.EndNewDeck(result);
        }
        
        private System.IAsyncResult OnBeginNewDeck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string deckname = ((string)(inValues[1]));
            string data = ((string)(inValues[2]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginNewDeck(username, deckname, data, callback, asyncState);
        }
        
        private object[] OnEndNewDeck(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EndNewDeck(result);
            return null;
        }
        
        private void OnNewDeckCompleted(object state) {
            if ((this.NewDeckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.NewDeckCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void NewDeckAsync(string username, string deckname, string data) {
            this.NewDeckAsync(username, deckname, data, null);
        }
        
        public void NewDeckAsync(string username, string deckname, string data, object userState) {
            if ((this.onBeginNewDeckDelegate == null)) {
                this.onBeginNewDeckDelegate = new BeginOperationDelegate(this.OnBeginNewDeck);
            }
            if ((this.onEndNewDeckDelegate == null)) {
                this.onEndNewDeckDelegate = new EndOperationDelegate(this.OnEndNewDeck);
            }
            if ((this.onNewDeckCompletedDelegate == null)) {
                this.onNewDeckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnNewDeckCompleted);
            }
            base.InvokeAsync(this.onBeginNewDeckDelegate, new object[] {
                        username,
                        deckname,
                        data}, this.onEndNewDeckDelegate, this.onNewDeckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegingetListOfMyDecks(string Username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfMyDecks(Username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> DuelPortalCS.SQLReference.IService1Console.EndgetListOfMyDecks(System.IAsyncResult result) {
            return base.Channel.EndgetListOfMyDecks(result);
        }
        
        private System.IAsyncResult OnBegingetListOfMyDecks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Username = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegingetListOfMyDecks(Username, callback, asyncState);
        }
        
        private object[] OnEndgetListOfMyDecks(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndgetListOfMyDecks(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetListOfMyDecksCompleted(object state) {
            if ((this.getListOfMyDecksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfMyDecksCompleted(this, new getListOfMyDecksCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfMyDecksAsync(string Username) {
            this.getListOfMyDecksAsync(Username, null);
        }
        
        public void getListOfMyDecksAsync(string Username, object userState) {
            if ((this.onBegingetListOfMyDecksDelegate == null)) {
                this.onBegingetListOfMyDecksDelegate = new BeginOperationDelegate(this.OnBegingetListOfMyDecks);
            }
            if ((this.onEndgetListOfMyDecksDelegate == null)) {
                this.onEndgetListOfMyDecksDelegate = new EndOperationDelegate(this.OnEndgetListOfMyDecks);
            }
            if ((this.ongetListOfMyDecksCompletedDelegate == null)) {
                this.ongetListOfMyDecksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfMyDecksCompleted);
            }
            base.InvokeAsync(this.onBegingetListOfMyDecksDelegate, new object[] {
                        Username}, this.onEndgetListOfMyDecksDelegate, this.ongetListOfMyDecksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegindeleteDeck(string username, string deckname, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteDeck(username, deckname, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EnddeleteDeck(System.IAsyncResult result) {
            base.Channel.EnddeleteDeck(result);
        }
        
        private System.IAsyncResult OnBegindeleteDeck(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string deckname = ((string)(inValues[1]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegindeleteDeck(username, deckname, callback, asyncState);
        }
        
        private object[] OnEnddeleteDeck(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EnddeleteDeck(result);
            return null;
        }
        
        private void OndeleteDeckCompleted(object state) {
            if ((this.deleteDeckCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteDeckCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteDeckAsync(string username, string deckname) {
            this.deleteDeckAsync(username, deckname, null);
        }
        
        public void deleteDeckAsync(string username, string deckname, object userState) {
            if ((this.onBegindeleteDeckDelegate == null)) {
                this.onBegindeleteDeckDelegate = new BeginOperationDelegate(this.OnBegindeleteDeck);
            }
            if ((this.onEnddeleteDeckDelegate == null)) {
                this.onEnddeleteDeckDelegate = new EndOperationDelegate(this.OnEnddeleteDeck);
            }
            if ((this.ondeleteDeckCompletedDelegate == null)) {
                this.ondeleteDeckCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteDeckCompleted);
            }
            base.InvokeAsync(this.onBegindeleteDeckDelegate, new object[] {
                        username,
                        deckname}, this.onEnddeleteDeckDelegate, this.ondeleteDeckCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegindeleteAllCards(string user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteAllCards(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EnddeleteAllCards(System.IAsyncResult result) {
            base.Channel.EnddeleteAllCards(result);
        }
        
        private System.IAsyncResult OnBegindeleteAllCards(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string user = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegindeleteAllCards(user, callback, asyncState);
        }
        
        private object[] OnEnddeleteAllCards(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EnddeleteAllCards(result);
            return null;
        }
        
        private void OndeleteAllCardsCompleted(object state) {
            if ((this.deleteAllCardsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteAllCardsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteAllCardsAsync(string user) {
            this.deleteAllCardsAsync(user, null);
        }
        
        public void deleteAllCardsAsync(string user, object userState) {
            if ((this.onBegindeleteAllCardsDelegate == null)) {
                this.onBegindeleteAllCardsDelegate = new BeginOperationDelegate(this.OnBegindeleteAllCards);
            }
            if ((this.onEnddeleteAllCardsDelegate == null)) {
                this.onEnddeleteAllCardsDelegate = new EndOperationDelegate(this.OnEnddeleteAllCards);
            }
            if ((this.ondeleteAllCardsCompletedDelegate == null)) {
                this.ondeleteAllCardsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteAllCardsCompleted);
            }
            base.InvokeAsync(this.onBegindeleteAllCardsDelegate, new object[] {
                        user}, this.onEnddeleteAllCardsDelegate, this.ondeleteAllCardsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegindeleteAllDecks(string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteAllDecks(username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EnddeleteAllDecks(System.IAsyncResult result) {
            base.Channel.EnddeleteAllDecks(result);
        }
        
        private System.IAsyncResult OnBegindeleteAllDecks(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegindeleteAllDecks(username, callback, asyncState);
        }
        
        private object[] OnEnddeleteAllDecks(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EnddeleteAllDecks(result);
            return null;
        }
        
        private void OndeleteAllDecksCompleted(object state) {
            if ((this.deleteAllDecksCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteAllDecksCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteAllDecksAsync(string username) {
            this.deleteAllDecksAsync(username, null);
        }
        
        public void deleteAllDecksAsync(string username, object userState) {
            if ((this.onBegindeleteAllDecksDelegate == null)) {
                this.onBegindeleteAllDecksDelegate = new BeginOperationDelegate(this.OnBegindeleteAllDecks);
            }
            if ((this.onEnddeleteAllDecksDelegate == null)) {
                this.onEnddeleteAllDecksDelegate = new EndOperationDelegate(this.OnEnddeleteAllDecks);
            }
            if ((this.ondeleteAllDecksCompletedDelegate == null)) {
                this.ondeleteAllDecksCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteAllDecksCompleted);
            }
            base.InvokeAsync(this.onBegindeleteAllDecksDelegate, new object[] {
                        username}, this.onEnddeleteAllDecksDelegate, this.ondeleteAllDecksCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegingetFullImageURL(string wikiPageUrl, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetFullImageURL(wikiPageUrl, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndgetFullImageURL(System.IAsyncResult result) {
            return base.Channel.EndgetFullImageURL(result);
        }
        
        private System.IAsyncResult OnBegingetFullImageURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string wikiPageUrl = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegingetFullImageURL(wikiPageUrl, callback, asyncState);
        }
        
        private object[] OnEndgetFullImageURL(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndgetFullImageURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetFullImageURLCompleted(object state) {
            if ((this.getFullImageURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getFullImageURLCompleted(this, new getFullImageURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getFullImageURLAsync(string wikiPageUrl) {
            this.getFullImageURLAsync(wikiPageUrl, null);
        }
        
        public void getFullImageURLAsync(string wikiPageUrl, object userState) {
            if ((this.onBegingetFullImageURLDelegate == null)) {
                this.onBegingetFullImageURLDelegate = new BeginOperationDelegate(this.OnBegingetFullImageURL);
            }
            if ((this.onEndgetFullImageURLDelegate == null)) {
                this.onEndgetFullImageURLDelegate = new EndOperationDelegate(this.OnEndgetFullImageURL);
            }
            if ((this.ongetFullImageURLCompletedDelegate == null)) {
                this.ongetFullImageURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetFullImageURLCompleted);
            }
            base.InvokeAsync(this.onBegingetFullImageURLDelegate, new object[] {
                        wikiPageUrl}, this.onEndgetFullImageURLDelegate, this.ongetFullImageURLCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegingetListOfImages(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfImages(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndgetListOfImages(System.IAsyncResult result) {
            return base.Channel.EndgetListOfImages(result);
        }
        
        private System.IAsyncResult OnBegingetListOfImages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegingetListOfImages(callback, asyncState);
        }
        
        private object[] OnEndgetListOfImages(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndgetListOfImages(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetListOfImagesCompleted(object state) {
            if ((this.getListOfImagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfImagesCompleted(this, new getListOfImagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfImagesAsync() {
            this.getListOfImagesAsync(null);
        }
        
        public void getListOfImagesAsync(object userState) {
            if ((this.onBegingetListOfImagesDelegate == null)) {
                this.onBegingetListOfImagesDelegate = new BeginOperationDelegate(this.OnBegingetListOfImages);
            }
            if ((this.onEndgetListOfImagesDelegate == null)) {
                this.onEndgetListOfImagesDelegate = new EndOperationDelegate(this.OnEndgetListOfImages);
            }
            if ((this.ongetListOfImagesCompletedDelegate == null)) {
                this.ongetListOfImagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfImagesCompleted);
            }
            base.InvokeAsync(this.onBegingetListOfImagesDelegate, null, this.onEndgetListOfImagesDelegate, this.ongetListOfImagesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BegingetAvatarImage(int userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAvatarImage(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndgetAvatarImage(System.IAsyncResult result) {
            return base.Channel.EndgetAvatarImage(result);
        }
        
        private System.IAsyncResult OnBegingetAvatarImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userId = ((int)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BegingetAvatarImage(userId, callback, asyncState);
        }
        
        private object[] OnEndgetAvatarImage(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndgetAvatarImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAvatarImageCompleted(object state) {
            if ((this.getAvatarImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAvatarImageCompleted(this, new getAvatarImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAvatarImageAsync(int userId) {
            this.getAvatarImageAsync(userId, null);
        }
        
        public void getAvatarImageAsync(int userId, object userState) {
            if ((this.onBegingetAvatarImageDelegate == null)) {
                this.onBegingetAvatarImageDelegate = new BeginOperationDelegate(this.OnBegingetAvatarImage);
            }
            if ((this.onEndgetAvatarImageDelegate == null)) {
                this.onEndgetAvatarImageDelegate = new EndOperationDelegate(this.OnEndgetAvatarImage);
            }
            if ((this.ongetAvatarImageCompletedDelegate == null)) {
                this.ongetAvatarImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAvatarImageCompleted);
            }
            base.InvokeAsync(this.onBegingetAvatarImageDelegate, new object[] {
                        userId}, this.onEndgetAvatarImageDelegate, this.ongetAvatarImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginsaveImage(string imgnameWithoutExtension, bool isAvi, string url, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveImage(imgnameWithoutExtension, isAvi, url, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndsaveImage(System.IAsyncResult result) {
            return base.Channel.EndsaveImage(result);
        }
        
        private System.IAsyncResult OnBeginsaveImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string imgnameWithoutExtension = ((string)(inValues[0]));
            bool isAvi = ((bool)(inValues[1]));
            string url = ((string)(inValues[2]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginsaveImage(imgnameWithoutExtension, isAvi, url, callback, asyncState);
        }
        
        private object[] OnEndsaveImage(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndsaveImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveImageCompleted(object state) {
            if ((this.saveImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveImageCompleted(this, new saveImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveImageAsync(string imgnameWithoutExtension, bool isAvi, string url) {
            this.saveImageAsync(imgnameWithoutExtension, isAvi, url, null);
        }
        
        public void saveImageAsync(string imgnameWithoutExtension, bool isAvi, string url, object userState) {
            if ((this.onBeginsaveImageDelegate == null)) {
                this.onBeginsaveImageDelegate = new BeginOperationDelegate(this.OnBeginsaveImage);
            }
            if ((this.onEndsaveImageDelegate == null)) {
                this.onEndsaveImageDelegate = new EndOperationDelegate(this.OnEndsaveImage);
            }
            if ((this.onsaveImageCompletedDelegate == null)) {
                this.onsaveImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveImageCompleted);
            }
            base.InvokeAsync(this.onBeginsaveImageDelegate, new object[] {
                        imgnameWithoutExtension,
                        isAvi,
                        url}, this.onEndsaveImageDelegate, this.onsaveImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginsaveTempImage(string url, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveTempImage(url, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndsaveTempImage(System.IAsyncResult result) {
            return base.Channel.EndsaveTempImage(result);
        }
        
        private System.IAsyncResult OnBeginsaveTempImage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string url = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginsaveTempImage(url, callback, asyncState);
        }
        
        private object[] OnEndsaveTempImage(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndsaveTempImage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsaveTempImageCompleted(object state) {
            if ((this.saveTempImageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveTempImageCompleted(this, new saveTempImageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveTempImageAsync(string url) {
            this.saveTempImageAsync(url, null);
        }
        
        public void saveTempImageAsync(string url, object userState) {
            if ((this.onBeginsaveTempImageDelegate == null)) {
                this.onBeginsaveTempImageDelegate = new BeginOperationDelegate(this.OnBeginsaveTempImage);
            }
            if ((this.onEndsaveTempImageDelegate == null)) {
                this.onEndsaveTempImageDelegate = new EndOperationDelegate(this.OnEndsaveTempImage);
            }
            if ((this.onsaveTempImageCompletedDelegate == null)) {
                this.onsaveTempImageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveTempImageCompleted);
            }
            base.InvokeAsync(this.onBeginsaveTempImageDelegate, new object[] {
                        url}, this.onEndsaveTempImageDelegate, this.onsaveTempImageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginInetConnection(string url, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInetConnection(url, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        byte[] DuelPortalCS.SQLReference.IService1Console.EndInetConnection(System.IAsyncResult result) {
            return base.Channel.EndInetConnection(result);
        }
        
        private System.IAsyncResult OnBeginInetConnection(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string url = ((string)(inValues[0]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginInetConnection(url, callback, asyncState);
        }
        
        private object[] OnEndInetConnection(System.IAsyncResult result) {
            byte[] retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndInetConnection(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInetConnectionCompleted(object state) {
            if ((this.InetConnectionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InetConnectionCompleted(this, new InetConnectionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InetConnectionAsync(string url) {
            this.InetConnectionAsync(url, null);
        }
        
        public void InetConnectionAsync(string url, object userState) {
            if ((this.onBeginInetConnectionDelegate == null)) {
                this.onBeginInetConnectionDelegate = new BeginOperationDelegate(this.OnBeginInetConnection);
            }
            if ((this.onEndInetConnectionDelegate == null)) {
                this.onEndInetConnectionDelegate = new EndOperationDelegate(this.OnEndInetConnection);
            }
            if ((this.onInetConnectionCompletedDelegate == null)) {
                this.onInetConnectionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInetConnectionCompleted);
            }
            base.InvokeAsync(this.onBeginInetConnectionDelegate, new object[] {
                        url}, this.onEndInetConnectionDelegate, this.onInetConnectionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginSendEmail(string username, string toAddress, string subject, string body, bool extractEmail, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendEmail(username, toAddress, subject, body, extractEmail, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string DuelPortalCS.SQLReference.IService1Console.EndSendEmail(System.IAsyncResult result) {
            return base.Channel.EndSendEmail(result);
        }
        
        private System.IAsyncResult OnBeginSendEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string toAddress = ((string)(inValues[1]));
            string subject = ((string)(inValues[2]));
            string body = ((string)(inValues[3]));
            bool extractEmail = ((bool)(inValues[4]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginSendEmail(username, toAddress, subject, body, extractEmail, callback, asyncState);
        }
        
        private object[] OnEndSendEmail(System.IAsyncResult result) {
            string retVal = ((DuelPortalCS.SQLReference.IService1Console)(this)).EndSendEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendEmailCompleted(object state) {
            if ((this.SendEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendEmailCompleted(this, new SendEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendEmailAsync(string username, string toAddress, string subject, string body, bool extractEmail) {
            this.SendEmailAsync(username, toAddress, subject, body, extractEmail, null);
        }
        
        public void SendEmailAsync(string username, string toAddress, string subject, string body, bool extractEmail, object userState) {
            if ((this.onBeginSendEmailDelegate == null)) {
                this.onBeginSendEmailDelegate = new BeginOperationDelegate(this.OnBeginSendEmail);
            }
            if ((this.onEndSendEmailDelegate == null)) {
                this.onEndSendEmailDelegate = new EndOperationDelegate(this.OnEndSendEmail);
            }
            if ((this.onSendEmailCompletedDelegate == null)) {
                this.onSendEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendEmailCompleted);
            }
            base.InvokeAsync(this.onBeginSendEmailDelegate, new object[] {
                        username,
                        toAddress,
                        subject,
                        body,
                        extractEmail}, this.onEndSendEmailDelegate, this.onSendEmailCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DuelPortalCS.SQLReference.IService1Console.BeginWriteErrorReport(string errorClass, string message, object result, string username, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginWriteErrorReport(errorClass, message, result, username, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void DuelPortalCS.SQLReference.IService1Console.EndWriteErrorReport(System.IAsyncResult result) {
            base.Channel.EndWriteErrorReport(result);
        }
        
        private System.IAsyncResult OnBeginWriteErrorReport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string errorClass = ((string)(inValues[0]));
            string message = ((string)(inValues[1]));
            object result = ((object)(inValues[2]));
            string username = ((string)(inValues[3]));
            return ((DuelPortalCS.SQLReference.IService1Console)(this)).BeginWriteErrorReport(errorClass, message, result, username, callback, asyncState);
        }
        
        private object[] OnEndWriteErrorReport(System.IAsyncResult result) {
            ((DuelPortalCS.SQLReference.IService1Console)(this)).EndWriteErrorReport(result);
            return null;
        }
        
        private void OnWriteErrorReportCompleted(object state) {
            if ((this.WriteErrorReportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.WriteErrorReportCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void WriteErrorReportAsync(string errorClass, string message, object result, string username) {
            this.WriteErrorReportAsync(errorClass, message, result, username, null);
        }
        
        public void WriteErrorReportAsync(string errorClass, string message, object result, string username, object userState) {
            if ((this.onBeginWriteErrorReportDelegate == null)) {
                this.onBeginWriteErrorReportDelegate = new BeginOperationDelegate(this.OnBeginWriteErrorReport);
            }
            if ((this.onEndWriteErrorReportDelegate == null)) {
                this.onEndWriteErrorReportDelegate = new EndOperationDelegate(this.OnEndWriteErrorReport);
            }
            if ((this.onWriteErrorReportCompletedDelegate == null)) {
                this.onWriteErrorReportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnWriteErrorReportCompleted);
            }
            base.InvokeAsync(this.onBeginWriteErrorReportDelegate, new object[] {
                        errorClass,
                        message,
                        result,
                        username}, this.onEndWriteErrorReportDelegate, this.onWriteErrorReportCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DuelPortalCS.SQLReference.IService1Console CreateChannel() {
            return new Service1ConsoleClientChannel(this);
        }
        
        private class Service1ConsoleClientChannel : ChannelBase<DuelPortalCS.SQLReference.IService1Console>, DuelPortalCS.SQLReference.IService1Console {
            
            public Service1ConsoleClientChannel(System.ServiceModel.ClientBase<DuelPortalCS.SQLReference.IService1Console> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginpopulateSQL(string username, bool isPublic, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = isPublic;
                System.IAsyncResult _result = base.BeginInvoke("populateSQL", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> EndpopulateSQL(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> _result = ((System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails>)(base.EndInvoke("populateSQL", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsubmitCard(DuelPortalCS.SQLReference.CardDetails stats, string imageUrlIfExists, bool readOnly, bool isPublic, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = stats;
                _args[1] = imageUrlIfExists;
                _args[2] = readOnly;
                _args[3] = isPublic;
                System.IAsyncResult _result = base.BeginInvoke("submitCard", _args, callback, asyncState);
                return _result;
            }
            
            public DuelPortalCS.SQLReference.CardChangeData EndsubmitCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                DuelPortalCS.SQLReference.CardChangeData _result = ((DuelPortalCS.SQLReference.CardChangeData)(base.EndInvoke("submitCard", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegineditCard(int trueID, DuelPortalCS.SQLReference.CardDetails stats, string user, string newImageIfExists, string pool, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = trueID;
                _args[1] = stats;
                _args[2] = user;
                _args[3] = newImageIfExists;
                _args[4] = pool;
                System.IAsyncResult _result = base.BeginInvoke("editCard", _args, callback, asyncState);
                return _result;
            }
            
            public DuelPortalCS.SQLReference.CardChangeData EndeditCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                DuelPortalCS.SQLReference.CardChangeData _result = ((DuelPortalCS.SQLReference.CardChangeData)(base.EndInvoke("editCard", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddOrChangeCardCCG(string ccgName, int cardId, DuelPortalCS.SQLReference.CardDetails data, string newImageIfExists, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = ccgName;
                _args[1] = cardId;
                _args[2] = data;
                _args[3] = newImageIfExists;
                System.IAsyncResult _result = base.BeginInvoke("AddOrChangeCardCCG", _args, callback, asyncState);
                return _result;
            }
            
            public DuelPortalCS.SQLReference.CardChangeData EndAddOrChangeCardCCG(System.IAsyncResult result) {
                object[] _args = new object[0];
                DuelPortalCS.SQLReference.CardChangeData _result = ((DuelPortalCS.SQLReference.CardChangeData)(base.EndInvoke("AddOrChangeCardCCG", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegindeleteCard(DuelPortalCS.SQLReference.CardDetails stats, string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = stats;
                _args[1] = user;
                System.IAsyncResult _result = base.BeginInvoke("deleteCard", _args, callback, asyncState);
                return _result;
            }
            
            public bool EnddeleteCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("deleteCard", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginshareCard(string username, string targetUser, System.Collections.ObjectModel.ObservableCollection<DuelPortalCS.SQLReference.CardDetails> cardData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = username;
                _args[1] = targetUser;
                _args[2] = cardData;
                System.IAsyncResult _result = base.BeginInvoke("shareCard", _args, callback, asyncState);
                return _result;
            }
            
            public string EndshareCard(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("shareCard", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginuserLogin(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("userLogin", _args, callback, asyncState);
                return _result;
            }
            
            public DuelPortalCS.SQLReference.LoginRegisterData EnduserLogin(System.IAsyncResult result) {
                object[] _args = new object[0];
                DuelPortalCS.SQLReference.LoginRegisterData _result = ((DuelPortalCS.SQLReference.LoginRegisterData)(base.EndInvoke("userLogin", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegincreateOrVerifyNewUser(string username, string password, string verification, string email, bool allowMessaging, bool isVerifying, string cardPool, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[7];
                _args[0] = username;
                _args[1] = password;
                _args[2] = verification;
                _args[3] = email;
                _args[4] = allowMessaging;
                _args[5] = isVerifying;
                _args[6] = cardPool;
                System.IAsyncResult _result = base.BeginInvoke("createOrVerifyNewUser", _args, callback, asyncState);
                return _result;
            }
            
            public DuelPortalCS.SQLReference.LoginRegisterData EndcreateOrVerifyNewUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                DuelPortalCS.SQLReference.LoginRegisterData _result = ((DuelPortalCS.SQLReference.LoginRegisterData)(base.EndInvoke("createOrVerifyNewUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginResendVerification(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("ResendVerification", _args, callback, asyncState);
                return _result;
            }
            
            public string EndResendVerification(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ResendVerification", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetAllUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getAllUsers", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndgetAllUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("getAllUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Beginrate(string raterUsername, string targetUsername, int rating, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = raterUsername;
                _args[1] = targetUsername;
                _args[2] = rating;
                System.IAsyncResult _result = base.BeginInvoke("rate", _args, callback, asyncState);
                return _result;
            }
            
            public bool Endrate(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("rate", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserData(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("GetUserData", _args, callback, asyncState);
                return _result;
            }
            
            public DuelPortalCS.SQLReference.UserData EndGetUserData(System.IAsyncResult result) {
                object[] _args = new object[0];
                DuelPortalCS.SQLReference.UserData _result = ((DuelPortalCS.SQLReference.UserData)(base.EndInvoke("GetUserData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetUserData(string username, DuelPortalCS.SQLReference.UserData uData, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = uData;
                System.IAsyncResult _result = base.BeginInvoke("SetUserData", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetUserData(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetUserData", _args, result);
            }
            
            public System.IAsyncResult BeginSetPool(string username, string pool, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = pool;
                System.IAsyncResult _result = base.BeginInvoke("SetPool", _args, callback, asyncState);
                return _result;
            }
            
            public void EndSetPool(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("SetPool", _args, result);
            }
            
            public System.IAsyncResult BegingetRating(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("getRating", _args, callback, asyncState);
                return _result;
            }
            
            public double EndgetRating(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("getRating", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsubmitDeck(string username, string deckname, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = deckname;
                System.IAsyncResult _result = base.BeginInvoke("submitDeck", _args, callback, asyncState);
                return _result;
            }
            
            public void EndsubmitDeck(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("submitDeck", _args, result);
            }
            
            public System.IAsyncResult BeginloadDeck(string username, string deckname, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = deckname;
                System.IAsyncResult _result = base.BeginInvoke("loadDeck", _args, callback, asyncState);
                return _result;
            }
            
            public string EndloadDeck(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("loadDeck", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveDeck(string username, string deckname, string data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = username;
                _args[1] = deckname;
                _args[2] = data;
                System.IAsyncResult _result = base.BeginInvoke("SaveDeck", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSaveDeck(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SaveDeck", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginNewDeck(string username, string deckname, string data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = username;
                _args[1] = deckname;
                _args[2] = data;
                System.IAsyncResult _result = base.BeginInvoke("NewDeck", _args, callback, asyncState);
                return _result;
            }
            
            public void EndNewDeck(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("NewDeck", _args, result);
            }
            
            public System.IAsyncResult BegingetListOfMyDecks(string Username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = Username;
                System.IAsyncResult _result = base.BeginInvoke("getListOfMyDecks", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndgetListOfMyDecks(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("getListOfMyDecks", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegindeleteDeck(string username, string deckname, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = deckname;
                System.IAsyncResult _result = base.BeginInvoke("deleteDeck", _args, callback, asyncState);
                return _result;
            }
            
            public void EnddeleteDeck(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("deleteDeck", _args, result);
            }
            
            public System.IAsyncResult BegindeleteAllCards(string user, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = user;
                System.IAsyncResult _result = base.BeginInvoke("deleteAllCards", _args, callback, asyncState);
                return _result;
            }
            
            public void EnddeleteAllCards(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("deleteAllCards", _args, result);
            }
            
            public System.IAsyncResult BegindeleteAllDecks(string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = username;
                System.IAsyncResult _result = base.BeginInvoke("deleteAllDecks", _args, callback, asyncState);
                return _result;
            }
            
            public void EnddeleteAllDecks(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("deleteAllDecks", _args, result);
            }
            
            public System.IAsyncResult BegingetFullImageURL(string wikiPageUrl, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = wikiPageUrl;
                System.IAsyncResult _result = base.BeginInvoke("getFullImageURL", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetFullImageURL(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getFullImageURL", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetListOfImages(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("getListOfImages", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetListOfImages(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getListOfImages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetAvatarImage(int userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("getAvatarImage", _args, callback, asyncState);
                return _result;
            }
            
            public string EndgetAvatarImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("getAvatarImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsaveImage(string imgnameWithoutExtension, bool isAvi, string url, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = imgnameWithoutExtension;
                _args[1] = isAvi;
                _args[2] = url;
                System.IAsyncResult _result = base.BeginInvoke("saveImage", _args, callback, asyncState);
                return _result;
            }
            
            public string EndsaveImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("saveImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginsaveTempImage(string url, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = url;
                System.IAsyncResult _result = base.BeginInvoke("saveTempImage", _args, callback, asyncState);
                return _result;
            }
            
            public string EndsaveTempImage(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("saveTempImage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginInetConnection(string url, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = url;
                System.IAsyncResult _result = base.BeginInvoke("InetConnection", _args, callback, asyncState);
                return _result;
            }
            
            public byte[] EndInetConnection(System.IAsyncResult result) {
                object[] _args = new object[0];
                byte[] _result = ((byte[])(base.EndInvoke("InetConnection", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendEmail(string username, string toAddress, string subject, string body, bool extractEmail, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = username;
                _args[1] = toAddress;
                _args[2] = subject;
                _args[3] = body;
                _args[4] = extractEmail;
                System.IAsyncResult _result = base.BeginInvoke("SendEmail", _args, callback, asyncState);
                return _result;
            }
            
            public string EndSendEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("SendEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginWriteErrorReport(string errorClass, string message, object result, string username, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = errorClass;
                _args[1] = message;
                _args[2] = result;
                _args[3] = username;
                System.IAsyncResult _result = base.BeginInvoke("WriteErrorReport", _args, callback, asyncState);
                return _result;
            }
            
            public void EndWriteErrorReport(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("WriteErrorReport", _args, result);
            }
        }
    }
}
